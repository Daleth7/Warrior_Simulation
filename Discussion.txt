Oh, hey look, a IDC (In Delay-time Chat)! >_>

Now what

Well I am currently working on reworking the environment header then making the source file for the classes.
I am going to make it into 3 classes instead of like 15. What all environmental factors do you guys think I
should factor in? So far I am thinking Ecosystem( where the ba)ttle takes place ), Weather( what the weather 
is like ) and the time of day( night/day ). Certain "Warriors" will benefit better in special scenarios than
others for example a modern soldier would do much better at night than a medieval soldier since we have night-
vision and someone who is from a certian area will know the landscape and will do slightly better while fighting
there compared to someone who is not naturally from that area ex a knight fighting in a desert vs someone that is
from the desert like a bandit or something.
-Giblit

-There is currently nothing about your ecosystem class that resembles the logic of an ecosystem, FYI:
http://www.merriam-webster.com/dictionary/ecosystem
-Modern soldiers do not have tactical advantage over a medieval soldier if they are without those precious goggles. 
Therefore, that should not be an innate characteristic.
-Night/Day sounds like a good idea. You can google types of weather and landscapes to get other types of environment
factors.
-How exactly are your three classes going to interact? I would have derived at least Weather and Landscape from
environment.
-Somebody help me figure out what's missing from my Warrior class?
~Daleth~

Oh yes I meant landscape not ecosystem not sure what I was thinking. They were interacting as derived classes origonally
but I was trying to make the variables protected and it would not work when I was trying to initialize them on the other
environment class but I suppose I could of just made them public variables instead on the landscape/weather environment.
Also I think it will be best if we have a weapon class before a environment class so I think I will start working on
that since it seems to be only me , you , and possibly filiprei.

Are you going to include like a warband/group of soliders to your class? For example a group of bandits could have
a sniper , a demolionist , a medic , and foot soldier. Oh and I think possibly adding a medic to the list where you have
strongmen / sharpeye. The medic won't "Heal" them but could stop bleeding, set bones ( if they are broken from a
hand-hand fight, tripping, getting hit by vehicle or something else ), supply crutches. Just suggestions on what a medic
could possibly do. Also, with your accuracy is that how accurate they are to hit a target or like a specific limb?
Someone could hit a guy 90% of the time but would not necessarly mean they are all head or body shots they could be
like arm/leg shots. Depending on the area where they are hit I would assume the person gets hurt more or incapitated more.
Back to the group of soldiers...I think different groups might have different leadership skills/tactics for the battle.
Some groups just do their own thing like barbarians I believe. Other groups though are more organized which could lead
to a slight advantage in the battle.
-Giblit

-Ah, okay I see, so you meant landscape. And what do you mean you had trouble initializing the protected variables?
-Wait a little longer on the weapon class. If we can get FredBill to make an account, we'll save a lot of work by adding his
file to the project.
-My enum class for Strongman and Sharpeye are really more descriptions for the attribute values, not the particular skill
of the warrior. Something like a demolitionist or a medic would describe more the equipment the warrior would have, and
my W_Template enum would be part of what describes that specialty. For example, a sniper could be described as having
a sniper rilfe, scope, goggles, camoflague, ammunition pack, and the attributes of the Sharpeye W_Template. But I think
can create another enum for the warrior specialties. Sounds like a good idea for a factory method, which I still need
to practice.
-As for the whole band thing, that can be a different class with its own building methods, because my class is for
individual warriors. I might try to incorporate the party/band/team thing after I'm done defining the warrior class.
-leadership sounds like an innate characteristic I can add as a private variable
-The accuracy of the warrior is defined to be a general case: for every attempt the warrior makes, what is his/her chance
of successfully hitting the target
-Separating the amount of endurance for each body part sounds like a good idea; definitely the kind of thing that 
should be implemented. I'll get on that right now.
~Daleth~

Sounds like a plan.
Sorry I meant initializing the variables of the Main class by using a protected item in the other class. I was trying
to do this because I was trying to do default classes but I could just make them public so they can be modified which
will probably be best all around and that way I can use them as derived classes and then have a couple of defaults.
I was reading up on "Battles and the factors" at https://en.wikipedia.org/wiki/Battle
The major factors to winning a battle seem to be: Number of soldiers, number of equipment, skill of commander(tactics?),
terrain advantages (says it's the most important factor), morale is > disipline of soldiers most of the time, types of
weapons and types of armor.
So I will work on the terrains like this if group 1 is at the top of a hill and group 2 is at the bottom of the hill
then group 1 will have a slight advantage in camoflauge, accuracy(easier to shoot downward?) and group 2 will have
less strength, swiftness, stamina, more hunger, less speed and less fortitude? I realized that weather probably was a
bad factor to use because that would affect both sides. Unless you wanted to give both sides a disadvantage based on a
random chance of something happening to each person like each side has a 1/1000 chance of getting knocked down by wind
on flat ground and if one side is climbing a hill they have a 1/100 chance of being knocked down. When they get knocked
down that would increase their chances of being hit since they would have nothing to hide behind like a boulder or tree.
The climbing method could be something that is used based on their speed. While climbing the speed is decreased and based
on the size of the hill/mountain it takes so long to get to the top..Once at the top their speed returns to normal maybe
slightly lower due to the fact they may have less stamina from their trip up the hill.
Do those seem like valid statements based on the terrain they are currently at?
-Giblit

-Mind showing a sample code of what you are describing, i.e. initializing the members with a protected member?
-The interactions between the environment and the warriors should be kept separate in an interaction/event manager. Otherwise,
the two classes would be illogically coupled, even though a tornado shouldn't care if there is a band of warriors
in its way; it just goes with the cell flow. Remember that classes should be designed in such a way that they
do not need to care if others exist, or in other words, to be as modular as possible.
-You can get started with that interaction/event class because nobody else has taken up the responsibility. I'll make
a modification public function you can use to change the attribute values of the warriors according to the conditions.
~Daleth~

[s]Oh yeah I meant like warrior.setTerrain( const Terrain& ) then set the stuff there after the terrains are set up.[/s]
I can start an event class but wouldn't that be best to work on last after we know all the variables? I can put in the
known varialbs that we have currently.
And the thing I was doing was just being dumb it was trying to access a protected item outside of the scope like this
class Mother
{
public:
    Mother( const Son& );
protected:
    short a , b;
}
class Son : public Mother
{
public:
    Son( short , short );
protected:
    short c , d;
}

Mother::Mother( const Son &s ) : a( s.c ) , b( s.d ){} //That was me being dumb trying to access a protected
//works if c and d are publics because then you can get acess to them outside of class

Also I am currently working on the terrain header now. I will put it where the old environment is now but I am still
working on it.
-Giblit

Why would you need the base class to modify the contents of the derived class? Making c and d public will effectively 
destroy your encapsulation as any one of us or the multiple functions will be able to modify the variables in ways 
you did not intend. From what you are doing, you just need a copy constructor for the derived class, not 
parameter-passing in the base class. Remember that when you make a derived class object, it will contain the base 
class but the reverse is not true.
~Daleth~

Ah that makes more sense I was thinking that it went both ways just started using derived classes the other day.
Lol at the solider type "obese"
-Giblit

Here's an example of class hierarchy: let Shape be the base and Triangle be the derived. How can Shape hold any information
on what a Triangle is? Base classes are usually the more general version while derived classes are extensions to the 
base class and/or are more specific.
~Daleth~
